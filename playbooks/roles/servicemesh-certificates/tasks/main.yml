---
- name: Kiali Operator
  debug:
    msg: "Monitor Kiali operator is installed"

- name: Check if Kiali Operator is installed
  monitor_operator_install:
    name: kiali-ossm
    namespace: openshift-operators

- name: Elasticsearch Operator
  debug:
    msg: "Elasticsearch operator is installed"

- name: Check if Elasticsearch Operator is installed
  monitor_operator_install:
    name: elasticsearch-operator
    namespace: openshift-operators-redhat

- name: Jaeger Operator
  debug:
    msg: "Monitor Jaeger operator is installed"

- name: Check if Jaeger Operator is installed
  monitor_operator_install:
    name: jaeger-product
    namespace: openshift-distributed-tracing

- name: Service Mesh Operator
  debug:
    msg: "Monitor service mesh operator is installed"

- name: Check if Service Mesh Operator is installed
  monitor_operator_install:
    name: servicemeshoperator
    namespace: openshift-operators

- name: Sync Service Mesh Application
  debug:
    msg: "Sync Service Mesh GitOps Application"

- sync_gitops_application:
    namespace: openshift-gitops
    secret: openshift-gitops-cluster
    url: openshift-gitops-server-openshift-gitops.apps-crc.testing
    port: 443
    application: 1-istio-controlplane

- name: Service Mesh Certificate
  debug:
    msg: "Generate Service Mesh Certificate"

- name: Create temporary build directory
  ansible.builtin.tempfile:
    state: directory
    suffix: -openssl
  register: ssldirectory
  no_log: True

- name: Create private key with password protection
  community.crypto.openssl_privatekey:
    path: "{{ ssldirectory.path }}/ca-certificate.key"
  no_log: True

- name: Create certificate signing request (CSR) for CA certificate
  community.crypto.openssl_csr_pipe:
    privatekey_path: "{{ ssldirectory.path }}/ca-certificate.key"
    common_name: Ansible CA
    use_common_name_for_san: false  # since we do not specify SANs, don't use CN as a SAN
    basic_constraints:
      - 'CA:TRUE'
    basic_constraints_critical: yes
    key_usage:
      - keyCertSign
    key_usage_critical: true
  register: ca_csr
  no_log: True

- name: Create self-signed CA certificate from CSR
  community.crypto.x509_certificate:
    path: "{{ ssldirectory.path }}/ca-certificate.pem"
    csr_content: "{{ ca_csr.csr }}"
    privatekey_path: "{{ ssldirectory.path }}/ca-certificate.key"
    provider: selfsigned
  no_log: True

- name: Create private key for new certificate
  community.crypto.openssl_privatekey:
    path: "{{ ssldirectory.path }}/certificate.key"
  run_once: true
  no_log: True

- name: Create certificate signing request (CSR) for new certificate
  community.crypto.openssl_csr_pipe:
    privatekey_path: "{{ ssldirectory.path }}/certificate.key"
    subject_alt_name:
      - "DNS:*.apps-crc.testing/O=Example Inc."
  run_once: true
  register: csr
  no_log: True

- name: Sign certificate with our CA
  community.crypto.x509_certificate_pipe:
    csr_content: "{{ csr.csr }}"
    provider: ownca
    ownca_path: "{{ ssldirectory.path }}/ca-certificate.pem"
    ownca_privatekey_path: "{{ ssldirectory.path }}/ca-certificate.key"
    ownca_not_after: +3650d  # valid for one year
    ownca_not_before: "-1d"  # valid since yesterday
  run_once: true
  register: certificate
  no_log: True

- debug:
    var: certificate.diff

- name: Write certificate file
  copy:
    dest: "{{ ssldirectory.path }}/wildcard.crt"
    content: "{{ certificate.certificate }}"
  run_once: true

- name: Set Certificate / Key paths
  set_fact:
    wildcard_key: "{{ ssldirectory.path }}/certificate.key"
  #  wildcard_crt: "{{ ssldirectory.path }}/wildcard.crt"
  #no_log: True

- name: Read Certificate / Key Data
  set_fact:
    wildcard_key_data: "{{ lookup('file', wildcard_key) }}"
    wildcard_crt_data: "{{ certificate.certificate }}"
  #no_log: True

- debug:
    msg: 
      - "Creating Service Mesh Certificate Secret from files:"
      - "- {{ ssldirectory.path }}/wildcard.crt"
      - "- {{ ssldirectory.path }}/wildcard.key"
      # openssl x509 -noout -modulus -in /tmp/ansible.8v44c6cz-openssl/wildcard.crt | md5sum
      # openssl rsa -noout -modulus -in /tmp/ansible.8v44c6cz-openssl/wildcard.key | md5sum 

- name: Create Service Mesh Certificate Secret
  kubernetes.core.k8s:
    state: present
    definition:
        apiVersion: v1
        data:
            tls.crt: "{{ wildcard_crt_data | b64encode }}"
            tls.key: "{{ wildcard_key_data | b64encode }}"
        kind: Secret
        metadata:
            name: wildcard-certificates
            namespace: istio-system
        type: kubernetes.io/tls
  #no_log: True

- debug:
    msg: "Monitoring Service Mesh to Become Ready"

- monitor_operator_custom_resource:
    name: basic
    namespace: istio-system
    group: maistra.io
    version: v2
    plural: servicemeshcontrolplanes
