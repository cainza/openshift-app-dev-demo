---

- debug:
    msg: "Get Number of nodes - This will only run on a single node"

- name: Get Number of nodes - Needs to be only one node
  ansible.builtin.command: "oc get nodes --no-headers"
  register: ocp_nodes
  failed_when: (ocp_nodes.stdout_lines | length) != 1

- name: OCP Number of ocp_nodes
  set_fact: 
    ocp_node_count: "{{ocp_nodes.stdout_lines | length}}"

- name: Get node name
  ansible.builtin.command: "oc get nodes  --no-headers -o name"
  register: ocp_node_name
  when: ocp_node_count == "1"

- name: Get Node Disks on {{ocp_node_name.stdout_lines[0]}}
  ansible.builtin.shell: 
    cmd: "oc debug {{ocp_node_name.stdout_lines[0]}} -- fdisk -l | grep '^Disk /dev'"
  register: ocp_disks
  failed_when: (ocp_disks.stdout_lines | length) < 3

- name: Waiting for ODF LVM Operator
  debug:
    msg: "Monitor ODF LVM operator is installed"
  when: ocp_node_count == "1"

- name: Check if ODF LVM is installed
  monitor_operator_install:
    name: odf-lvm-operator
    namespace: openshift-storage
  when: ocp_node_count == "1"

- name: Create ODF LVM in GitOps
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: argoproj.io/v1alpha1
      kind: Application
      metadata:
        name: odf-lvm
        namespace: "{{ openshift_argocd_namespace }}"
      spec:
        destination:
          namespace: openshift-storage
          server: https://kubernetes.default.svc
        project: "{{ cluster_demo_setup_project }}"
        source:
          path: demo/odf-lvm
          repoURL: "{{ cluster_demo_setup_repo }}"
          targetRevision: "{{ cluster_demo_setup_revision }}"
        syncPolicy:
          automated: {}
          syncOptions:
            - CreateNamespace=true
  when: ocp_node_count == "1"

- name: Waiting for ODF LVM Cluster to be ready
  debug:
    msg: "Monitoring ODF LVM Cluster"

- name: Monitoring ODF LVM Ready
  monitor_operator_custom_resource:
    name: "{{ lvmcluster_name }}"
    namespace: openshift-storage
    group: "{{ lvmcluster_apigroup }}"
    version: "{{ lvmcluster_apiversion }}"
    plural: lvmclusters
    custom_ready_key: "ready"
    custom_ready_value: "True"

- name: Create Registry PVC
  kubernetes.core.k8s:
    state: present
    definition:
      kind: PersistentVolumeClaim
      apiVersion: v1
      metadata:
        name: openshift-registry
        namespace: openshift-image-registry
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 50Gi
        volumeMode: Filesystem
        storageClassName: odf-lvm-odf-lvm-vg-immediate
        capacity:
          storage: 50Gi
  when: ocp_node_count == "1"
  register: create_pvc
  ignore_errors: yes

- name: Change Rollout Strategy to Recreate - Needed for RWO Disks
  ansible.builtin.command: oc patch configs.imageregistry.operator.openshift.io cluster --type merge --patch '{"spec":{"rolloutStrategy":"Recreate"}}'

- name: Patch Registry to be available
  ansible.builtin.command: oc patch configs.imageregistry.operator.openshift.io cluster --type merge --patch '{"spec":{"managementState":"Managed"}}'
  when: ocp_node_count == "1"

- name: Patch Registry to use PVC
  ansible.builtin.command: oc patch configs.imageregistry.operator.openshift.io cluster --type merge --patch '{"spec":{"storage":{"pvc":{"claim":"openshift-registry"}}}}'
  when: ocp_node_count == "1"

#oc patch configs.imageregistry.operator.openshift.io cluster --type merge --patch '{"spec":{"managementState":"Managed"}}'
#oc edit configs.imageregistry.operator.openshift.io
# Create PVC in  openshift-image-registry
#oc patch configs.imageregistry.operator.openshift.io cluster --type merge --patch '{"spec":{"storage":{"emptyDir":{}}}}'
#https://docs.openshift.com/container-platform/4.11/registry/configuring_registry_storage/configuring-registry-storage-baremetal.html